import { HttpFunction, CloudEventFunction, HandlerFunction } from './functions';
import { SignatureType } from './types';
interface RegisteredFunction {
    signatureType: SignatureType;
    userFunction: HandlerFunction;
}
/**
 * Get a declaratively registered function
 * @param functionName the name with which the function was registered
 * @returns the registered function and signature type or undefined no function matching
 * the provided name has been registered.
 */
export declare const getRegisteredFunction: (functionName: string) => RegisteredFunction | undefined;
/**
 * Register a function that responds to HTTP requests.
 * @param functionName - the name of the function
 * @param handler - the function to invoke when handling HTTP requests
 * @public
 */
export declare const http: (functionName: string, handler: HttpFunction) => void;
/**
 * Register a function that handles CloudEvents.
 * @param functionName - the name of the function
 * @param handler - the function to trigger when handling CloudEvents
 * @public
 */
export declare const cloudEvent: (functionName: string, handler: CloudEventFunction) => void;
export {};
//# sourceMappingURL=function_registry.d.ts.map